# [team name] Design Document

## Instructions

*Save a copy of this template for your team in the same folder that contains
this template.*

*Replace italicized text (including this text!) with details of the design you
are proposing for your team project. (Your replacement text shouldn't be in
italics)*

*You should take a look at the example design document in the same folder as
this template for more guidance on the types of information to capture, and the
level of detail to aim for.*

## Streamers Design

## 1. Problem Statement

*Explain clearly what problem you are trying to solve.*

Streamers is a streaming service that provides expertly curated content for listeners
who want suggestions of underground artists that fit their specific tastes.

This design document describes the Streamers service, a new service that will
provide a custom playlist based on our customers' needs. Users will be equipped with the
ability to listen to new, upcoming, underground artists based on their current interests and
preferences. Their playlist will be updated by their personal preferences based
off the song library that we have curated. The user will also have access to additional songs that are
similar to their preferences.

How to define lesser known artists
Less than 1 million monthly listeners

User looks at 24 mainstream songs
user can choose up to top 10 songs from the mainstream list
user will get a one song suggestion based off their preference
user will like or dislike the song in the suggestions based off GENRE, liked songs will be added to the USERS playlist and dislike will not be added,
backend will return a playlist just for the user based on liked songs
user will have access to other songs based on the GENRE (colors) keep a tally of these to provide the rest of the songs

How is the front end going to look?

Graffitti Underground




*****Genres (each category gets 10 songs)
one man one woman


1. Alt Rock - Deepali --- Black
2. Hip/Hop & RNB - Sarah --- Navy Blue -- Drake/Nicki Minaj or Lauryn Hill?
3. Country - Deepali -- Leather Brown
4. Oldies - Deepali -- Orange
5. Electronic - Sarah -- Lime Green -- Daft Punk/ Grimes or Lady Gaga (lady gaga is considered dance electronic) Frou Frou - Let Go
6. Soundtracks - Sarah -- Pink -- John Williams /
7. Reggae - Sarah -- Red -- Bob Marley/Marcia Griffiths
8. Indie - Deepali -- Lilac
9. Instrumental - Deepali -- Yellow
10. Pop - Sarah -- Hot pink -- Ed Sheeran/Taylor Swift
11. Jazz - Deepali -- Indigo
12. Latin - Sarah -- Hot Tamale red (flames) -- Wisin/Karol G

Hip/Hop & RNB -- Drake / Lauryn Hill
1.Arlissa - Hearts Ain't Gonna Lie
2.Fatboi Sharif -- Fly Pelican
3.Hook -- 4:47 AM
4.Na-Kel Smith -- Wait on you
5.D2x -- Day Job
6.Rigz -- Heads On The Wall
7.DonMonique -- Drown   ***
8.Ivy Sole -- Dream Girl (lauryn hill song vibes)
9.Che Noir -- Table for 3
10.Lakeyah -- Mind Yo Business

Electronic -- Daft Punk / Grimes
1.Jlin -- Vladmir's Blues
2.Anna Meredith -- Calion
3.Gwenno -- Tir Ha mor
4.Gazelle Twin -- Look What Your Love Has Done To Me
5.The Field -- Everybody's Got To Learn Sometime
6.Holly Herndon -- Frontier
7.U.S Girls -- L-Over
8.Leon Vynehall -- It's Just (House of Dupree)
9.Kassem Mosse -- Flowers in May
10.Hieroglyphic Being -- Ashrams

Soundtracks -- John Williams / Walt Disney (these were all composed for movie soundtracks)
1.Anne Dudley -- Main Titles
2.Rachel Portman -- Laughter Montage
3.Debbie Wiseman -- Wilde West
4.Lesley Barber -- Manchester By The Sea Chorale
5.Delia Derbyshire -- Quest
6.Mica Levi -- Children
7.Wendy Carlos -- Love Theme
8.Angela Morley -- Watership Down: Keehaar's Theme
9.Michael Andrews -- Mad World (known ish song, but one hit wonder, still has less than 1 mil followers)
10.Patrick Doyle -- Harry in Winter
11.Jon Brion -- Reconcile

Reggae -- Bob Marley / Marcia Griffiths
1.Burning Spear -- Marcus Garvey
2.Sizzla -- Give Me A Try
3.Jah Roots -- Crucial
4.Serengeti -- Dennehy
5.Jesse Cool -- Zion I
6.Junior Tshaka -- La Jungle
7.Dezarie -- Most High
8.Alaine -- Deeper
9.Lisa Hype -- How Yuh Do It Like Dat
10.Tanya Stephens -- It's A Pity

Pop -- Ed Sheeran / Taylor Swift , usually played on electronic instruments, that is popular with many people because it consists of short songs with a strong beat
1.Eisenhower Field Day -- Five After
2.Kalliope Jones -- Bubblegum <3
3.Audrey Napoleon -- #Mysunrise
4.TYSM -- Normal No More
5.Animal Collective -- My Girls
6.DIV/DED -- I JUST WANT YOU
7.Marshall Crenshaw -- Someday, Someway
8.Liz Phair -- Why Can't I?
9.Tommy Richman -- BUNKER/PREROLL
10.My Favorite Color -- Good Times

Latin -- Wisin / Karol G
1.Combo Chimbita -- Brillo Mas Que El Oro (La Bala Apuntandome)
2.Reyna Tropical -- Como Fuego
3.Inner Wave -- American Spirits
4.Cimafunk -- Parar el Tiempo
5.Nicola Cruz -- Cumbia del Olvido
6.Manu Manzo --Te Queiro Ver
7.Como Las Movies -- Cumbia De Los Monjes
8.Gina Chavez -- La Que Manda
9.Maria Isabel -- atrapada en el cielo
10.The Citie -- Nena


One table for all the songs.

## 2. Top Questions to Resolve in Review

*List the most important questions you have about your design, or things that
you are still debating internally that you might like help working through.*

1. How will we organize all of the data? If the user dislikes a certain song, do they have to
continue through the whole playlist or
2. How many songs based off the user survey will be provided? We can have one song provided, or a list of 10 songs?
3. Are the upvotes going to be their playlist songs?

## 3. Use Cases

*This is where we work backwards from the customer and define what our customers
would like to do (and why). You may also include use cases for yourselves, or
for the organization providing the product to customers.*

U1. As a customer if they down vote a song, it will be removed from customers playlist(table).

U2. *As a [product] customer, I want to view my grocery list when I log into the
grocery list page*

U3. ...

## 4. Project Scope

*Clarify which parts of the problem you intend to solve. It helps reviewers know
what questions to ask to make sure you are solving for what you say and stops
discussions from getting sidetracked by aspects you do not intend to handle in
your design.*

### 4.1. In Scope

*Which parts of the problem defined in Sections 1 and 2 will you solve with this
design?*

### 4.2. Out of Scope

*Based on your problem description in Sections 1 and 2, are there any aspects
you are not planning to solve? Do potential expansions or related problems occur
to you that you want to explicitly say you are not worrying about now? Feel free
to put anything here that you think your team can't accomplish in the unit, but
would love to do with more time.*

# 5. Proposed Architecture Overview

*Describe broadly how you are proposing to solve for the requirements you
described in Section 2.*

*This may include class diagram(s) showing what components you are planning to
build.*

*You should argue why this architecture (organization of components) is
reasonable. That is, why it represents a good data flow and a good separation of
concerns. Where applicable, argue why this architecture satisfies the stated
requirements.*

# 6. API

## 6.1. Public Models

*Define the data models your service will expose in its responses via your
*`-Model`* package. These will be equivalent to the *`PlaylistModel`* and
*`SongModel`* from the Unit 3 project.*

## 6.2. *First Endpoint*

*Describe the behavior of the first endpoint you will build into your service
API. This should include what data it requires, what data it returns, and how it
will handle any known failure cases. You should also include a sequence diagram
showing how a user interaction goes from user to website to service to database,
and back. This first endpoint can serve as a template for subsequent endpoints.
(If there is a significant difference on a subsequent endpoint, review that with
your team before building it!)*

*(You should have a separate section for each of the endpoints you are expecting
to build...)*

## 6.3 *Second Endpoint*

*(repeat, but you can use shorthand here, indicating what is different, likely
primarily the data in/out and error conditions. If the sequence diagram is
nearly identical, you can say in a few words how it is the same/different from
the first endpoint)*

# 7. Tables

*Define the DynamoDB tables you will need for the data your service will use. It
may be helpful to first think of what objects your service will need, then
translate that to a table structure, like with the *`Playlist` POJO* versus the
`playlists` table in the Unit 3 project.*

# 8. Pages

*Include mock-ups of the web pages you expect to build. These can be as
sophisticated as mockups/wireframes using drawing software, or as simple as
hand-drawn pictures that represent the key customer-facing components of the
pages. It should be clear what the interactions will be on the page, especially
where customers enter and submit data. You may want to accompany the mockups
with some description of behaviors of the page (e.g. “When customer submits the
submit-dog-photo button, the customer is sent to the doggie detail page”)*
